# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: "0.2.0"
  resources:
    # Set PowerShell Execution Policy
    - resource: PSDscResources/Script
      id: RemoveDefaultApps
      directives:
        description: Remove Bloat Default Apps
      settings:
        GetScript: |
          return $true
        TestScript: |
          return $false
        SetScript: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
    # Remove Bloat Default Apps
    - resource: PSDscResources/Script
      id: RemoveDefaultApps
      directives:
        description: Remove Bloat Default Apps
      settings:
        GetScript: |
          return $true
        TestScript: |
          return $false
        SetScript: |
          $apps = @("Clipchamp","549981C3F5F10","BingNews","BingWeather","MicrosoftSolitaireCollection","MicrosoftStickyNotes","MicrosoftOfficeHub","Todos","WindowsFeedbackHub","WindowsMaps","WindowsSoundRecorder","QuickAssist","windowscommunicationsapps","GetHelp","Getstarted")
          Get-AppxPackage -AllUsers | where {$name = $_.Name; ($apps | %{$name.Contains($_)}) -Contains $true} | Remove-AppxPackage -AllUsers
    # Settings
    # Enable Developer Mode
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: EnableDeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
    # Show File Extensions
    - resource: Microsoft.Windows.Developer/HideFileExtensions
      id: ShowFileExtensions
      directives:
        description: Show File Extensions
        allowPrerelease: true
      settings:
        Ensure: Absent
    # Hide Task View Button
    - resource: Microsoft.Windows.Developer/ShowTaskViewButton
      id: StupidTaskViewDSCBug
      directives:
        description: Stupid Task View Button Setting Bug
        allowPrerelease: true
      settings:
        Ensure: Present
    - resource: Microsoft.Windows.Developer/ShowTaskViewButton
      id: HideTaskView
      directives:
        description: Hide Task View Button
        allowPrerelease: true
      dependsOn:
        - StupidTaskViewDSCBug
      settings:
        Ensure: Absent
    # Show Hidden Files
    - resource: Microsoft.Windows.Developer/ShowHiddenFiles
      id: ShowHiddenFiles
      directives:
        description: Show Hidden Files
        allowPrerelease: true
      settings:
        Ensure: Present
    # Enable Dark Mode
    - resource: Microsoft.Windows.Developer/EnableDarkMode
      id: EnableDarkMode
      directives:
        description: Enable Dark Mode
        allowPrerelease: true
      settings:
        Ensure: Present
    # Setup Folder Structure
    - resource: PSDscResources/Script
      id: FolderStructure
      directives:
        description: Setup Folder Structure
      settings:
        GetScript: |
          $dotConfig = Test-Path "$env:USERPROFILE\.config" -Type Container
          $tools = Test-Path "$env:USERPROFILE\Tools" -Type Container
          $src = Test-Path "D:\src" -Type Container
          $srcp = Test-Path "D:\src\p" -Type Container
          $srcs = Test-Path "D:\src\s" -Type Container
          $srcNrth = Test-Path "D:\src\nrth" -Type Container
          return ${
            dotConfig = $dotConfig;
            tools = $tools;
            src = $src;
            srcp = $srcp;
            srcs = $srcs;
            srcNrth = $srcNrth
          }
        TestScript: |
          $dotConfig = Test-Path "$env:USERPROFILE\.config" -Type Container
          $tools = Test-Path "$env:USERPROFILE\Tools" -Type Container
          $src = Test-Path "D:\src" -Type Container
          $srcp = Test-Path "D:\src\p" -Type Container
          $srcs = Test-Path "D:\src\s" -Type Container
          $srcNrth = Test-Path "D:\src\nrth" -Type Container
          return $dotConfig -and $tools -and $src -and $srcp -and $srcs -and $srcNrth
        SetScript: |
          mkdir "$env:USERPROFILE\.config" -ErrorAction SilentlyContinue
          mkdir "$env:USERPROFILE\Tools" -ErrorAction SilentlyContinue
          mkdir "D:\src" -ErrorAction SilentlyContinue
          mkdir "D:\src\p" -ErrorAction SilentlyContinue
          mkdir "D:\src\s" -ErrorAction SilentlyContinue
          mkdir "D:\src\nrth" -ErrorAction SilentlyContinue
    # Run O&O Shutup 10++
    - resource: PSDscResources/Script
      id: OOSU
      dependsOn:
        - FolderStructure
      directives:
        description: Run OOSU
      settings:
        GetScript: |
          return $true
        TestScript: |
          return $false
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/ozokuz/win-config/main/oosu.ps1 -OutFile "$env:USERPROFILE\Downloads\oosu.ps1"
          powershell.exe -Command "$env:USERPROFILE\Downloads\oosu.ps1"
    # Setup Quick Access Pins
    - resource: PSDscResources/Script
      id: QuickAccess
      dependsOn:
        - FolderStructure
      directives:
        description: Setup Quick Access Pins
      settings:
        GetScript: |
          $o = new-object -com shell.application
          $pins = @("$env:USERNAME","src","Downloads","Documents","Tools","Recycle Bin")
          return ($o.Namespace("shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}").Items() | where {$_.name -notin $pins})
        TestScript: |
          $o = new-object -com shell.application
          $pins = @("$env:USERNAME","src","Downloads","Documents","Tools","Recycle Bin")
          $count = ($o.Namespace("shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}").Items() | where {$_.name -notin $pins} | measure).Count
          return $count -eq 0
        SetScript: |
          $o = new-object -com shell.application
          $allowedPins = @("$env:USERNAME","src","Downloads","Documents","Tools","Recycle Bin")
          $o.Namespace("shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}").Items() | where {$_.name -notin $allowedPins} | foreach-object {$_.InvokeVerb("unpinfromhome")}
          $pins = @("$env:USERPROFILE", "D:\src", "$env:USERPROFILE\Tools", "::{645FF040-5081-101B-9F08-00AA002F954E}")
          $pins | foreach-object {$o.Namespace($_).Self.InvokeVerb("pintohome")}
    # Install Utils (7-Zip, PowerToys, PowerShell, Everything, AltSnap, ShareX, Tailscale, EarTrumpet, WizTree & Nilesoft Shell)
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: 7Zip
      directives:
        description: Install 7-Zip
        allowPrerelease: true
      settings:
        id: "7zip.7zip"
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: PowerToys
      directives:
        description: Install PowerToys
        allowPrerelease: true
      settings:
        id: Microsoft.PowerToys
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: PowerShell
      directives:
        description: Install PowerShell
        allowPrerelease: true
      settings:
        id: Microsoft.PowerShell
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Everything
      directives:
        description: Install Everything
        allowPrerelease: true
      settings:
        id: voidtools.Everything
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: AltSnap
      directives:
        description: Install AltSnap
        allowPrerelease: true
      settings:
        id: AltSnap.AltSnap
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: ShareX
      directives:
        description: Install ShareX
        allowPrerelease: true
      settings:
        id: ShareX.ShareX
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Tailscale
      directives:
        description: Install Tailscale
        allowPrerelease: true
      settings:
        id: tailscale.tailscale
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: EarTrumpet
      directives:
        description: Install EarTrumpet
        allowPrerelease: true
      settings:
        id: File-New-Project.EarTrumpet
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: WizTree
      directives:
        description: Install WizTree
        allowPrerelease: true
      settings:
        id: AntibodySoftware.WizTree
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: NilesoftShell
      directives:
        description: Install Nilesoft Shell
        allowPrerelease: true
      settings:
        id: Nilesoft.Shell
        source: winget
    # Install Apps
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Discord
      directives:
        description: Install Discord
        allowPrerelease: true
      settings:
        id: Discord.Discord
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Notion
      directives:
        description: Install Notion
        allowPrerelease: true
      settings:
        id: Notion.Notion
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Obsidian
      directives:
        description: Install Obsidian
        allowPrerelease: true
      settings:
        id: Obsidian.Obsidian
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: TickTick
      directives:
        description: Install TickTick
        allowPrerelease: true
      settings:
        id: Appest.TickTick
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Authy
      directives:
        description: Install Authy
        allowPrerelease: true
      settings:
        id: Twilio.Authy
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Bitwarden
      directives:
        description: Install Bitwarden
        allowPrerelease: true
      settings:
        id: Bitwarden.Bitwarden
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Brave
      directives:
        description: Install Brave
        allowPrerelease: true
      settings:
        id: Brave.Brave
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Chrome
      directives:
        description: Install Chrome
        allowPrerelease: true
      settings:
        id: Google.Chrome
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Firefox
      directives:
        description: Install Firefox
        allowPrerelease: true
      settings:
        id: Mozilla.Firefox
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: PaintNET
      directives:
        description: Install Paint.NET
        allowPrerelease: true
      settings:
        id: dotPDNLLC.paintdotnet
        source: winget
    # Install Dev Tools
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: VSCode
      directives:
        description: Install Visual Studio Code
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: VS2022
      directives:
        description: Install Visual Studio 2022 Community
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudio.2022.Community
        source: winget
    - resource: PSDscResources/Script
      id: VSConfig
      directives:
        description: Download VSConfig
      settings:
        GetScript: |
          return $true
        TestScript: |
          return Test-Path "$env:USERPROFILE\Downloads\vsconfig"
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/ozokuz/win-config/main/.vsconfig -OutFile "$env:USERPROFILE\Downloads\.vsconfig"
    - resource: Microsoft.VisualStudio.DSC/VSComponents
      id: VSWorkloads
      dependsOn:
        - VS2022
        - VSConfig
      directives:
        description: Install VS workloads from VSConfig
        allowPrerelease: true
      settings:
        productId: Microsoft.VisualStudio.Product.Community
        channelId: VisualStudio.17.Release
        vsConfigFile: '${WinGetConfigRoot}\.vsconfig'
        includeRecommended: true
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GitHubCLI
      directives:
        description: Install GitHub CLI
        allowPrerelease: true
      settings:
        id: GitHub.cli
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: JBToolbox
      directives:
        description: Install JetBrains Toolbox
        allowPrerelease: true
      settings:
        id: JetBrains.Toolbox
        source: winget
    # Install Scoop & Scoop apps
    - resource: PSDscResources/Script
      id: Scoop
      dependsOn:
        - Git
      directives:
        description: Install Scoop
      settings:
        GetScript: |
          return $true
        TestScript: |
          return Test-Path "$env:USERPROFILE\scoop" -Type Container
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/ozokuz/win-config/main/scoop.ps1 -OutFile "$env:USERPROFILE\Downloads\scoop.ps1"
          $action = New-ScheduledTaskAction -Execute "powershell.exe -Command '$env:USERPROFILE\Downloads\scoop.ps1'"
          Register-ScheduledTask -TaskName "SetupScoop" -Action $action
          Start-ScheduledTask "SetupScoop"
          do {
            $scoopComplete = Test-Path "$env:USERPROFILE\scoop\shims\wget.exe"
            if (-not ($scoopComplete)) {
              Start-Sleep 1
            }
          } until ($scoopComplete)
          Unregister-ScheduledTask "SetupScoop"
          Remove-Item "$env:USERPROFILE\Downloads\scoop.ps1"
    # Install Windows Features (Hyper-V, Hypervisor Platform, .NET 3.5 & WSL)
    - resource: PSDscResources/Script
      id: HyperV
      directives:
        description: Install Hyper-V
      settings:
        GetScript: |
          return DISM /Online /Get-FeatureInfo /FeatureName:Microsoft-Hyper-V
        TestScript:
          return (DISM /Online /Get-FeatureInfo /FeatureName:Microsoft-Hyper-V | Select-String "State ").ToString().Split(":")[1].Trim() -eq "Enabled"
        SetScript: |
          DISM /Online /Enable-Feature /FeatureName:Microsoft-Hyper-V /All /NoRestart
    - resource: PSDscResources/Script
      id: HypervisorPlatform
      directives:
        description: Enable Windows Hypervisor Platform
      settings:
        GetScript: |
          return DISM /Online /Get-FeatureInfo HypervisorPlatform
        TestScript:
          return (DISM /Online /Get-FeatureInfo /FeatureName:HypervisorPlatform | Select-String "State ").ToString().Split(":")[1].Trim() -eq "Enabled"
        SetScript: |
          DISM /Online /Enable-Feature /FeatureName:HypervisorPlatform /NoRestart
    - resource: PSDscResources/Script
      id: NetFx3
      directives:
        description: Install .NET 3.5
      settings:
        GetScript: |
          return DISM /Online /Get-FeatureInfo NetFx3
        TestScript:
          return (DISM /Online /Get-FeatureInfo /FeatureName:NetFx3 | Select-String "State ").ToString().Split(":")[1].Trim() -eq "Enabled"
        SetScript: |
          DISM /Online /Enable-Feature /FeatureName:NetFx3 /NoRestart
    - resource: PSDscResources/Script
      id: WSL
      directives:
        description: Install WSL
      settings:
        GetScript: |
            return wsl.exe -l -q
        TestScript: |
            wsl.exe -l -q | where-object {$_ -eq "Ubuntu"}
            return $?
        SetScript: |
            wsl.exe --install