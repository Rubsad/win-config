# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: "0.2.0"
  resources:
    # Set PowerShell Execution Policy
    - resource: PSDscResources/Script
      id: ExecutionPolicy
      directives:
        description: Set PowerShell Execution Policy
      settings:
        GetScript: |
          return $true
        TestScript: |
          return $false
        SetScript: |
          $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
          Register-ScheduledTask -TaskName "ExecutionPolicy" -Action $action
          Start-ScheduledTask "ExecutionPolicy"
          Start-Sleep 2
          Unregister-ScheduledTask "ExecutionPolicy" -Confirm:$false
    # Remove Bloat Default Apps
    - resource: PSDscResources/Script
      id: RemoveDefaultApps
      directives:
        description: Remove Bloat Default Apps
      settings:
        GetScript: |
          return $true
        TestScript: |
          return $false
        SetScript: |
          $apps = @("Clipchamp","549981C3F5F10","BingNews","BingWeather","MicrosoftStickyNotes","MicrosoftOfficeHub","Todos","WindowsFeedbackHub","WindowsMaps","WindowsSoundRecorder","QuickAssist","windowscommunicationsapps","GetHelp","Getstarted")
          Get-AppxPackage -AllUsers | where {$name = $_.Name; ($apps | %{$name.Contains($_)}) -Contains $true} | Remove-AppxPackage -AllUsers
    # Settings
    # Enable Developer Mode
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: EnableDeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
  # Show File Extensions
    - resource: Microsoft.Windows.Developer/HideFileExtensions
      id: ShowFileExtensionsDSCBug
      directives:
        description: Show File Extensions
        allowPrerelease: true
      settings:
        Ensure: Present
    - resource: Microsoft.Windows.Developer/HideFileExtensions
      id: ShowFileExtensions
      directives:
        description: Show File Extensions
        allowPrerelease: true
      dependsOn:
        - ShowFileExtensionsDSCBug
      settings:
        Ensure: Absent
    # Hide Task View Button
    - resource: Microsoft.Windows.Developer/ShowTaskViewButton
      id: StupidTaskViewDSCBug
      directives:
        description: Stupid Task View Button Setting Bug
        allowPrerelease: true
      settings:
        Ensure: Present
    - resource: Microsoft.Windows.Developer/ShowTaskViewButton
      id: HideTaskView
      directives:
        description: Hide Task View Button
        allowPrerelease: true
      dependsOn:
        - StupidTaskViewDSCBug
      settings:
        Ensure: Absent
    # Show Hidden Files
    - resource: Microsoft.Windows.Developer/ShowHiddenFiles
      id: ShowHiddenFiles
      directives:
        description: Show Hidden Files
        allowPrerelease: true
      settings:
        Ensure: Present
    # Enable Dark Mode
    - resource: Microsoft.Windows.Developer/EnableDarkMode
      id: EnableDarkMode
      directives:
        description: Enable Dark Mode
        allowPrerelease: true
      settings:
        Ensure: Present
    # File Explorer starts to This PC
    - resource: PSDscResources/Registry
      id: ExplorerThisPC
      directives:
        description: File Explorer starts to This PC
      settings:
        Key: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"
        ValueName: LaunchTo
        ValueType: DWord
        ValueData: 1
        Ensure: Present
        Force: true
    # Hide Desktop Icons
    - resource: PSDscResources/Registry
      id: HideIcons
      directives:
        description: Hide Desktop Icons
      settings:
        Key: "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"
        ValueName: HideIcons
        ValueType: DWord
        ValueData: 1
        Ensure: Present
        Force: true
    # Disable Storage Sense
    - resource: PSDscResources/Registry
      id: StorageSense
      directives:
        description: Disable Storage Sense
      settings:
        Key: "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\StorageSense"
        ValueName: AllowStorageSenseGlobal
        ValueType: DWord
        ValueData: 0
        Ensure: Present
        Force: true
    # Download Wallpaper
    - resource: PSDscResources/Script
      id: Wallpaper
      directives:
        description: Download Wallpaper
      settings:
        GetScript: |
          return $false
        TestScript: |
          return $false
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/rubsad/win-config/main/wallpaper.png -OutFile "$env:USERPROFILE\Pictures\wallpaper.png"
    # Download Custom Uploader
    - resource: PSDscResources/Script
      id: CustomUploader
      directives:
        description: Download Custom uploader
      settings:
        GetScript: |
          return $false
        TestScript: |
          return $false
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/rubsad/win-config/main/sadder.tv.sxcu -OutFile "$env:USERPROFILE\Downloads\sadder.tv.sxcu"
    # Setup Folder Structure
    - resource: PSDscResources/Script
      id: FolderStructure
      directives:
        description: Setup Folder Structure
      settings:
        GetScript: |
          $dotConfig = Test-Path "$env:USERPROFILE\.config" -Type Container
          $tools = Test-Path "$env:USERPROFILE\Tools" -Type Container
          $packages = Test-Path "D:\packages" -Type Container
          $npm = Test-Path "D:\packages\npm" -Type Container
          $pip = Test-Path "D:\packages\pip" -Type Container
          $cargo = Test-Path "D:\packages\cargo" -Type Container
          $maven = Test-Path "D:\packages\maven" -Type Container
          $src = Test-Path "D:\src" -Type Container
          $srcp = Test-Path "D:\src\p" -Type Container
          $srcSadder = Test-Path "D:\src\sadder" -Type Container
          return ${
            dotConfig = $dotConfig;
            tools = $tools;
            packages = $packages;
            npm = $npm;
            pip = $pip;
            cargo = $cargo;
            maven = $maven;
            src = $src;
            srcp = $srcp;
            srcSadder = $srcSadder
          }
        TestScript: |
          $dotConfig = Test-Path "$env:USERPROFILE\.config" -Type Container
          $tools = Test-Path "$env:USERPROFILE\Tools" -Type Container
          $packages = Test-Path "D:\packages" -Type Container
          $npm = Test-Path "D:\packages\npm" -Type Container
          $pip = Test-Path "D:\packages\pip" -Type Container
          $cargo = Test-Path "D:\packages\cargo" -Type Container
          $maven = Test-Path "D:\packages\maven" -Type Container
          $src = Test-Path "D:\src" -Type Container
          $srcp = Test-Path "D:\src\p" -Type Container
          $srcSadder = Test-Path "D:\src\sadder" -Type Container
          return $dotConfig -and $tools -and $packages -and $npm -and $pip -and $cargo -and $maven -and $src -and $srcp -and $srcSadder
        SetScript: |
          mkdir "$env:USERPROFILE\.config" -ErrorAction SilentlyContinue
          mkdir "$env:USERPROFILE\Tools" -ErrorAction SilentlyContinue
          mkdir "D:\packages" -ErrorAction SilentlyContinue
          mkdir "D:\packages\npm" -ErrorAction SilentlyContinue
          mkdir "D:\packages\pip" -ErrorAction SilentlyContinue
          mkdir "D:\packages\cargo" -ErrorAction SilentlyContinue
          mkdir "D:\packages\maven" -ErrorAction SilentlyContinue
          mkdir "D:\src" -ErrorAction SilentlyContinue
          mkdir "D:\src\p" -ErrorAction SilentlyContinue
          mkdir "D:\src\sadder" -ErrorAction SilentlyContinue
    # Run O&O Shutup 10++
    - resource: PSDscResources/Script
      id: OOSU
      dependsOn:
        - FolderStructure
      directives:
        description: Run OOSU
      settings:
        GetScript: |
          return $true
        TestScript: |
          return $false
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/rubsad/win-config/main/oosu.ps1 -OutFile "$env:USERPROFILE\Downloads\oosu.ps1"
          powershell.exe -Command "$env:USERPROFILE\Downloads\oosu.ps1"
    # Setup Quick Access Pins
    - resource: PSDscResources/Script
      id: QuickAccess
      dependsOn:
        - FolderStructure
      directives:
        description: Setup Quick Access Pins
      settings:
        GetScript: |
          $o = new-object -com shell.application
          $pins = @("$env:USERNAME","src","Downloads","Documents","Tools","Recycle Bin")
          return ($o.Namespace("shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}").Items() | where {$_.name -notin $pins})
        TestScript: |
          $o = new-object -com shell.application
          $pins = @("$env:USERNAME","src","Downloads","Documents","Tools","Recycle Bin")
          $count = ($o.Namespace("shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}").Items() | where {$_.name -notin $pins} | measure).Count
          return $count -eq 0
        SetScript: |
          $o = new-object -com shell.application
          $allowedPins = @("$env:USERNAME","src","Downloads","Documents","Tools","Recycle Bin")
          $o.Namespace("shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}").Items() | where {$_.name -notin $allowedPins} | foreach-object {$_.InvokeVerb("unpinfromhome")}
          $pins = @("$env:USERPROFILE", "D:\src", "$env:USERPROFILE\Tools", "::{645FF040-5081-101B-9F08-00AA002F954E}")
          $pins | foreach-object {$o.Namespace($_).Self.InvokeVerb("pintohome")}
    # Install Utils (7-Zip, PowerToys, PowerShell, Everything, AltSnap, ShareX, Tailscale, EarTrumpet, WizTree & Nilesoft Shell)
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: 7Zip
      directives:
        description: Install 7-Zip
        allowPrerelease: true
      settings:
        id: "7zip.7zip"
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: PowerToys
      directives:
        description: Install PowerToys
        allowPrerelease: true
      settings:
        id: Microsoft.PowerToys
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: PowerShell
      directives:
        description: Install PowerShell
        allowPrerelease: true
      settings:
        id: Microsoft.PowerShell
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Autoruns
      directives:
        description: Install Autoruns
        allowPrerelease: true
      settings:
        id: Microsoft.Sysinternals.Autoruns
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: ProcessExplorer
      directives:
        description: Install ProcessExplorer
        allowPrerelease: true
      settings:
        id: Microsoft.Sysinternals.ProcessExplorer
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Everything
      directives:
        description: Install Everything
        allowPrerelease: true
      settings:
        id: voidtools.Everything
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: AltSnap
      directives:
        description: Install AltSnap
        allowPrerelease: true
      settings:
        id: AltSnap.AltSnap
        source: winget
    - resource: PSDscResources/Script
      id: AltSnapStartup
      directives:
        description: Autostart AltSnap
      settings:
        GetScript: |
          return Get-ScheduledTask -TaskName "AltSnap"
        TestScript: |
          Get-ScheduledTask -TaskName "AltSnap" -ErrorAction SilentlyContinue
          return $?
        SetScript: |
          $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
          $trigger = New-ScheduledTaskTrigger -AtLogOn
          $action = New-ScheduledTaskAction -Execute "C:\Users\Ozoku\AppData\Roaming\AltSnap\AltSnap.exe"
          Register-ScheduledTask -TaskName "AltSnap" -Trigger $trigger -Action $action -RunLevel Highest -Settings $settings
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: ShareX
      directives:
        description: Install ShareX
        allowPrerelease: true
      settings:
        id: ShareX.ShareX
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Tailscale
      directives:
        description: Install Tailscale
        allowPrerelease: true
      settings:
        id: tailscale.tailscale
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: EarTrumpet
      directives:
        description: Install EarTrumpet
        allowPrerelease: true
      settings:
        id: File-New-Project.EarTrumpet
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: WizTree
      directives:
        description: Install WizTree
        allowPrerelease: true
      settings:
        id: AntibodySoftware.WizTree
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: NilesoftShell
      directives:
        description: Install Nilesoft Shell
        allowPrerelease: true
      settings:
        id: Nilesoft.Shell
        source: winget
    # Install Apps
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Discord
      directives:
        description: Install Discord
        allowPrerelease: true
      settings:
        id: Discord.Discord
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Notion
      directives:
        description: Install Notion
        allowPrerelease: true
      settings:
        id: Notion.Notion
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Obsidian
      directives:
        description: Install Obsidian
        allowPrerelease: true
      settings:
        id: Obsidian.Obsidian
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Bitwarden
      directives:
        description: Install Bitwarden
        allowPrerelease: true
      settings:
        id: Bitwarden.Bitwarden
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: PaintNET
      directives:
        description: Install Paint.NET
        allowPrerelease: true
      settings:
        id: dotPDN.PaintDotNet
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GIMP
      directives:
        description: Install GIMP
        allowPrerelease: true
      settings:
        id: GIMP.GIMP
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Krita
      directives:
        description: Install Krita
        allowPrerelease: true
      settings:
        id: KDE.Krita
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: audacity
      directives:
        description: Install Audacity
        allowPrerelease: true
      settings:
        id: Audacity.Audacity
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: OBS
      directives:
        description: Install OBS Studio
        allowPrerelease: true
      settings:
        id: OBSProject.OBSStudio
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: JDK8
      directives:
        description: Install Java 8
        allowPrerelease: true
      settings:
        id: EclipseAdoptium.Temurin.8.JDK
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: JDK17
      directives:
        description: Install Java 17
        allowPrerelease: true
      settings:
        id: EclipseAdoptium.Temurin.17.JDK
        source: winget
    # Gaming
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Prism
      directives:
        description: Install Prism Launcher
        allowPrerelease: true
      settings:
        id: PrismLauncher.PrismLauncher
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Steam
      directives:
        description: Install Steam
        allowPrerelease: true
      settings:
        id: Valve.Steam
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Ubisoft
      directives:
        description: Install Ubisoft Connect
        allowPrerelease: true
      settings:
        id: Ubisoft.Connect
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: EpicGames
      directives:
        description: Install Epic Games
        allowPrerelease: true
      settings:
        id: EpicGames.EpicGamesLauncher
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Riot
      directives:
        description: Install Riot Launcher
        allowPrerelease: true
      settings:
        id: RiotGames.LeagueOfLegends.EUW
        source: winget
    # Pheriperals
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: NZXTCAM
      directives:
        description: Install NZXT CAM
        allowPrerelease: true
      settings:
        id: NZXT.CAM
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GoXLR
      directives:
        description: Install GoXLR Utility
        allowPrerelease: true
      settings:
        id: GoXLR-on-Linux.GoXLR-Utility
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GHub
      directives:
        description: Install Logitech GHub
        allowPrerelease: true
      settings:
        id: Logitech.GHUB
        source: winget
    # Install Dev Tools
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: VSCode
      directives:
        description: Install Visual Studio Code
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: VS2022
      directives:
        description: Install Visual Studio 2022 Community
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudio.2022.Community
        source: winget
    - resource: PSDscResources/Script
      id: VSConfig
      directives:
        description: Download VSConfig
      settings:
        GetScript: |
          return $true
        TestScript: |
          return Test-Path "$env:USERPROFILE\Downloads\vsconfig"
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/rubsad/win-config/main/.vsconfig -OutFile "$env:USERPROFILE\Downloads\.vsconfig"
    - resource: Microsoft.VisualStudio.DSC/VSComponents
      id: VSWorkloads
      dependsOn:
        - VS2022
        - VSConfig
      directives:
        description: Install VS workloads from VSConfig
        maxVersion: "1.0.15"
        allowPrerelease: true
      settings:
        productId: Microsoft.VisualStudio.Product.Community
        channelId: VisualStudio.17.Release
        vsConfigFile: '${WinGetConfigRoot}\.vsconfig'
        includeRecommended: true
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GitHubCLI
      directives:
        description: Install GitHub CLI
        allowPrerelease: true
      settings:
        id: GitHub.cli
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: JBToolbox
      directives:
        description: Install JetBrains Toolbox
        allowPrerelease: true
      settings:
        id: JetBrains.Toolbox
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: WinSCP
      directives:
        description: Install WinSCP
        allowPrerelease: true
      settings:
        id: WinSCP.WinSCP
        source: winget
    # Install Scoop & Scoop apps
    - resource: PSDscResources/Script
      id: Scoop
      dependsOn:
        - Git
      directives:
        description: Install Scoop
      settings:
        GetScript: |
          return $true
        TestScript: |
          return Test-Path "$env:USERPROFILE\scoop" -Type Container
        SetScript: |
          Invoke-RestMethod https://raw.githubusercontent.com/Rubsad/win-config/main/scoop.ps1 -OutFile "$env:USERPROFILE\Downloads\scoop.ps1"
          $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "$env:USERPROFILE\Downloads\scoop.ps1"
          Register-ScheduledTask -TaskName "SetupScoop" -Action $action
          Start-ScheduledTask "SetupScoop"
          do {
            $scoopComplete = Test-Path "$env:USERPROFILE\scoop\shims\wget.exe"
            if (-not ($scoopComplete)) {
              Start-Sleep 1
            }
          } until ($scoopComplete)
          Unregister-ScheduledTask "SetupScoop" -Confirm:$false
          Remove-Item "$env:USERPROFILE\Downloads\scoop.ps1"
